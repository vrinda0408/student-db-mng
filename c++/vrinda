#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <algorithm>
#include <iomanip>

using namespace std;

class Student {
private:
    string name;
    int rollNumber;
    float gpa;

public:
    Student(string n, int r, float g) : name(n), rollNumber(r), gpa(g) {}

    string getName() const { return name; }
    int getRollNumber() const { return rollNumber; }
    float getGPA() const { return gpa; }

    void setName(string n) { name = n; }
    void setGPA(float g) { gpa = g; }

    void display() const {
        cout << setw(20) << left << name 
             << setw(15) << rollNumber 
             << setw(10) << fixed << setprecision(2) << gpa << endl;
    }
};

class StudentManagementSystem {
private:
    vector<Student> students;
    string filename;

    void saveToFile() {
        ofstream file(filename);
        for (const auto& student : students) {
            file << student.getName() << "," 
                 << student.getRollNumber() << "," 
                 << student.getGPA() << endl;
        }
        file.close();
    }

    void loadFromFile() {
        ifstream file(filename);
        string line, name;
        int rollNumber;
        float gpa;

        while (getline(file, line)) {
            size_t pos1 = line.find(',');
            size_t pos2 = line.find(',', pos1 + 1);
            name = line.substr(0, pos1);
            rollNumber = stoi(line.substr(pos1 + 1, pos2 - pos1 - 1));
            gpa = stof(line.substr(pos2 + 1));
            students.emplace_back(name, rollNumber, gpa);
        }
        file.close();
    }

public:
    StudentManagementSystem(string fname) : filename(fname) {
        loadFromFile();
    }

    void addStudent() {
        string name;
        int rollNumber;
        float gpa;

        cout << "Enter student name: ";
        cin.ignore();
        getline(cin, name);
        cout << "Enter roll number: ";
        cin >> rollNumber;
        cout << "Enter GPA: ";
        cin >> gpa;

        students.emplace_back(name, rollNumber, gpa);
        saveToFile();
        cout << "Student added successfully!" << endl;
    }

    void displayAllStudents() const {
        if (students.empty()) {
            cout << "No students found." << endl;
            return;
        }
        cout << setw(20) << left << "Name" 
             << setw(15) << "Roll Number" 
             << setw(10) << "GPA" << endl;
        cout << string(45, '-') << endl;
        for (const auto& student : students) {
            student.display();
        }
    }

    void searchStudent() const {
        int rollNumber;
        cout << "Enter roll number to search: ";
        cin >> rollNumber;

        auto it = find_if(students.begin(), students.end(),
                          [rollNumber](const Student& s) { return s.getRollNumber() == rollNumber; });

        if (it != students.end()) {
            cout << setw(20) << left << "Name" 
                 << setw(15) << "Roll Number" 
                 << setw(10) << "GPA" << endl;
            cout << string(45, '-') << endl;
            it->display();
        } else {
            cout << "Student not found." << endl;
        }
    }

    void updateStudent() {
        int rollNumber;
        cout << "Enter roll number of student to update: ";
        cin >> rollNumber;

        auto it = find_if(students.begin(), students.end(),
                          [rollNumber](const Student& s) { return s.getRollNumber() == rollNumber; });

        if (it != students.end()) {
            string name;
            float gpa;

            cout << "Enter new name (or press enter to keep current): ";
            cin.ignore();
            getline(cin, name);
            if (!name.empty()) {
                it->setName(name);
            }

            cout << "Enter new GPA (or -1 to keep current): ";
            cin >> gpa;
            if (gpa >= 0) {
                it->setGPA(gpa);
            }

            saveToFile();
            cout << "Student updated successfully!" << endl;
        } else {
            cout << "Student not found." << endl;
        }
    }

    void deleteStudent() {
        int rollNumber;
        cout << "Enter roll number to delete: ";
        cin >> rollNumber;

        auto it = find_if(students.begin(), students.end(),
                          [rollNumber](const Student& s) { return s.getRollNumber() == rollNumber; });

        if (it != students.end()) {
            students.erase(it);
            saveToFile();
            cout << "Student deleted successfully!" << endl;
        } else {
            cout << "Student not found." << endl;
        }
    }
};

int main() {
    StudentManagementSystem sms("students.txt");
    int choice;

    while (true) {
        cout << "\nStudent Management System" << endl;
        cout << "1. Add Student" << endl;
        cout << "2. Display All Students" << endl;
        cout << "3. Search Student" << endl;
        cout << "4. Update Student" << endl;
        cout << "5. Delete Student" << endl;
        cout << "6. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                sms.addStudent();
                break;
            case 2:
                sms.displayAllStudents();
                break;
            case 3:
                sms.searchStudent();
                break;
            case 4:
                sms.updateStudent();
                break;
            case 5:
                sms.deleteStudent();
                break;
            case 6:
                cout << "Exiting program. Goodbye!" << endl;
                return 0;
            default:
                cout << "Invalid choice. Please try again." << endl;
        }
    }

    return 0;
}